package com.halconbit.dog.hairdresser.jpa.java.gui;

import com.halconbit.dog.hairdresser.jpa.java.controller.Index;
import com.halconbit.dog.hairdresser.jpa.java.logic.Pet;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Brayan Esteves
 */
public class ReadData extends javax.swing.JFrame {
    
    private Index index    = null;
    private int   position = 1;
    
    /**
     * Creates new form ReadData
     */
    public ReadData() {
        this.index = new Index();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        panelContent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDogHairdresser = new javax.swing.JTable();
        labelPetData = new javax.swing.JLabel();
        buttonUpdate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Lato", 1, 47)); // NOI18N
        labelTitle.setText("Read Data");

        panelContent.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tableDogHairdresser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableDogHairdresser);

        labelPetData.setText("Pet data:");

        buttonUpdate.setText("Update");
        buttonUpdate.setToolTipText("");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelContentLayout = new javax.swing.GroupLayout(panelContent);
        panelContent.setLayout(panelContentLayout);
        panelContentLayout.setHorizontalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContentLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(panelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPetData)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelContentLayout.setVerticalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContentLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(labelPetData)
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelContentLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelContentLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTitle)
                .addGap(349, 349, 349))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadTable();
    }//GEN-LAST:event_formWindowOpened

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // I check that the table is not empty.
        if(this.tableDogHairdresser.getRowCount() > 0) {
            // I check that a record has been selected.
            /**
             * -1 = No selected row
             */
            if(this.tableDogHairdresser.getSelectedRow() != -1) {
                /**
                 * <b>1</b> is <i>Column</i> <b>1</b> of <b>Customer number</b>
                 */
                int customer_number = Integer.parseInt(String.valueOf(this.tableDogHairdresser.getValueAt(this.tableDogHairdresser.getSelectedRow(), 1)));
                this.index.deletePet(customer_number);
                loadTable();
                showMessage("Delete successful.", JOptionPane.INFORMATION_MESSAGE, "Delete Successful.");
                
            } else {
                showMessage("Not selected data at delete.", JOptionPane.WARNING_MESSAGE, "Not selected data at delete.");
            }
        } else {
            showMessage("Not exists data.", JOptionPane.ERROR_MESSAGE, "Not exists data.");
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        // I check that the table is not empty.
        if(this.tableDogHairdresser.getRowCount() > 0) {
            // I check that a record has been selected.
            /**
             * -1 = No selected row
             */
            if(this.tableDogHairdresser.getSelectedRow() != -1) {
                /**
                 * <b>1</b> is <i>Column</i> <b>1</b> of <b>Customer number</b>
                 */
                int customer_number = Integer.parseInt(String.valueOf(this.tableDogHairdresser.getValueAt(this.tableDogHairdresser.getSelectedRow(), 1)));
                
                UpdateData updateData = new UpdateData(customer_number);
                updateData.setVisible(true);
                updateData.setLocationRelativeTo(null);
                
                this.dispose();
                
                loadTable();
                
            } else {
                showMessage("Not selected data at update.", JOptionPane.WARNING_MESSAGE, "Not selected data at update.");
            }
        } else {
            showMessage("Not exists data.", JOptionPane.ERROR_MESSAGE, "Not exists data.");
        }        
        
    }//GEN-LAST:event_buttonUpdateActionPerformed

    public void showMessage(String message, int type, String title) {
        JOptionPane optionPane = new JOptionPane(message);
        optionPane.setMessageType(type);
        JDialog dialog = optionPane.createDialog(title);
        dialog.setAlwaysOnTop(false);
        dialog.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelPetData;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTable tableDogHairdresser;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {
        // Define the model we want the table to have.
        DefaultTableModel defaultTableModel = new DefaultTableModel() {
            // Make rows and columns non-editable
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        // We set the column names.
        String titles[] = {"#", "Customer number", "Dog name", "Breed", "Color", "Allergic", "Special care", "Name owner", "Cellphone number owner"};
        defaultTableModel.setColumnIdentifiers(titles);
        
        // Loading data from the database.
        List<Pet> listPets = this.index.fetchingPets();
        
        // Iterate through the list and fetch each element in the table.
        if(listPets != null) {
            // Set variable.
            this.position = 1;
            for(Pet pet : listPets) {
                Object[] object = {this.position, pet.getCustomer_number(), pet.getDog_name(), pet.getBreed(), pet.getColor(), pet.getAllergic(), pet.getSpecial_care(), pet.getOwner().getName(), pet.getOwner().getCellphone_number()};
                this.position++;
                
                defaultTableModel.addRow(object);
            }
        }
        
        this.tableDogHairdresser.setModel(defaultTableModel);
        
    }
}
